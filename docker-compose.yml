version: "3.9"

x-node-service: &node-service
  restart: unless-stopped
  networks:
    - challenge-network
  environment:
    - NODE_ENV=development
    - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    - DB_HOST=db
    - DB_PORT=5432
    - DB_USERNAME=postgres
    - DB_PASSWORD=password
    - DB_NAME=challenge_db
  depends_on:
    db:
      condition: service_healthy
    rabbitmq:
      condition: service_healthy

services:
  # Frontend (Next.js/React)
  web:
    <<: *node-service
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    ports:
      - "3000:3000"
    command: npm run dev -- --host 0.0.0.0
    volumes:
      - .:/app
      - web_node_modules:/app/apps/web/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000

  # API Gateway
  api-gateway:
    <<: *node-service
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: api-gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    volumes:
      - .:/app
      - apigw_node_modules:/app/apps/api-gateway/node_modules

  # Auth Service
  auth-service:
    <<: *node-service
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
    volumes:
      - .:/app
      - auth_node_modules:/app/apps/auth-service/node_modules

  # Tasks Service
  tasks-service:
    <<: *node-service
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
    volumes:
      - .:/app
      - tasks_node_modules:/app/apps/tasks-service/node_modules

  # Notifications Service
  notifications-service:
    <<: *node-service
    container_name: notifications-service
    build:
      context: .
      dockerfile: ./apps/notifications-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
    volumes:
      - .:/app
      - notif_node_modules:/app/apps/notifications-service/node_modules

  # Postgres (dev)
  db:
    image: postgres:17-alpine
    container_name: db
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - challenge-network
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: challenge_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d challenge_db"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  # Postgres (test) - sobe sÃ³ quando pedir: `--profile test up`
  db-test:
    image: postgres:17-alpine
    container_name: db-test
    profiles: ["test"]
    restart: unless-stopped
    ports:
      - "5433:5432"
    networks:
      - challenge-network
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: challenge_test_db
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d challenge_test_db"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - challenge-network
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

volumes:
  postgres_data:
  postgres_test_data:
  rabbitmq_data:
  web_node_modules:
  apigw_node_modules:
  auth_node_modules:
  tasks_node_modules:
  notif_node_modules:

networks:
  challenge-network:
    driver: bridge
